// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SessionInfo session info
//
// swagger:model SessionInfo
type SessionInfo struct {

	// 课程类型, UnFormal 代表非正式课, Formal 代表正式课
	// Example: Formal
	// Enum: [UnFormal Formal]
	ClassType string `json:"classType,omitempty"`

	// 课程结束时间(unix 时间戳(毫秒))
	// Example: 1548067573
	EndTime int64 `json:"endTime,omitempty"`

	// 数据库 session 表中的 session 字段
	// Example: 7210000
	// Required: true
	SessionID *string `json:"sessionId"`

	// 课程开始时间(unix 时间戳(毫秒))
	// Example: 1548085855
	StartTime int64 `json:"startTime,omitempty"`

	//  回放状态信息: <br> playbackNotGenerated 回放还未生成, 包括需要重新生成, 还未生成 <br> sessionNotExist 课程不存在 <br> sessionNotFinish 课程正在上课 <br> playbackFailedGenerated 回放生成失败, 包括只有语音、只有画图等各种错误情况 <br> playbackSuccessGenerated 回放生成成功
	// Example: playbackSuccessGenerated
	// Enum: [sessionNotExist sessionNotFinish playbackNotGenerated playbackFailedGenerated playbackSuccessGenerated]
	Status *string `json:"status,omitempty"`

	// 学生的用户名
	// Example: test014
	Student string `json:"student,omitempty"`

	// 老师的用户名
	// Example: muyi
	Teacher string `json:"teacher,omitempty"`
}

// Validate validates this session info
func (m *SessionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClassType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sessionInfoTypeClassTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UnFormal","Formal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sessionInfoTypeClassTypePropEnum = append(sessionInfoTypeClassTypePropEnum, v)
	}
}

const (

	// SessionInfoClassTypeUnFormal captures enum value "UnFormal"
	SessionInfoClassTypeUnFormal string = "UnFormal"

	// SessionInfoClassTypeFormal captures enum value "Formal"
	SessionInfoClassTypeFormal string = "Formal"
)

// prop value enum
func (m *SessionInfo) validateClassTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sessionInfoTypeClassTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SessionInfo) validateClassType(formats strfmt.Registry) error {
	if swag.IsZero(m.ClassType) { // not required
		return nil
	}

	// value enum
	if err := m.validateClassTypeEnum("classType", "body", m.ClassType); err != nil {
		return err
	}

	return nil
}

func (m *SessionInfo) validateSessionID(formats strfmt.Registry) error {

	if err := validate.Required("sessionId", "body", m.SessionID); err != nil {
		return err
	}

	return nil
}

var sessionInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sessionNotExist","sessionNotFinish","playbackNotGenerated","playbackFailedGenerated","playbackSuccessGenerated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sessionInfoTypeStatusPropEnum = append(sessionInfoTypeStatusPropEnum, v)
	}
}

const (

	// SessionInfoStatusSessionNotExist captures enum value "sessionNotExist"
	SessionInfoStatusSessionNotExist string = "sessionNotExist"

	// SessionInfoStatusSessionNotFinish captures enum value "sessionNotFinish"
	SessionInfoStatusSessionNotFinish string = "sessionNotFinish"

	// SessionInfoStatusPlaybackNotGenerated captures enum value "playbackNotGenerated"
	SessionInfoStatusPlaybackNotGenerated string = "playbackNotGenerated"

	// SessionInfoStatusPlaybackFailedGenerated captures enum value "playbackFailedGenerated"
	SessionInfoStatusPlaybackFailedGenerated string = "playbackFailedGenerated"

	// SessionInfoStatusPlaybackSuccessGenerated captures enum value "playbackSuccessGenerated"
	SessionInfoStatusPlaybackSuccessGenerated string = "playbackSuccessGenerated"
)

// prop value enum
func (m *SessionInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sessionInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SessionInfo) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this session info based on context it is used
func (m *SessionInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SessionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionInfo) UnmarshalBinary(b []byte) error {
	var res SessionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
