// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SessionIds 连线 ID 的数组
//
// swagger:model SessionIds
type SessionIds struct {

	// session ids
	// Example: ["7210000","7210001","7210002","7210003","7210004","7210005"]
	// Required: true
	// Min Items: 1
	// Unique: true
	SessionIds []string `json:"sessionIds"`
}

// Validate validates this session ids
func (m *SessionIds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSessionIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionIds) validateSessionIds(formats strfmt.Registry) error {

	if err := validate.Required("sessionIds", "body", m.SessionIds); err != nil {
		return err
	}

	iSessionIdsSize := int64(len(m.SessionIds))

	if err := validate.MinItems("sessionIds", "body", iSessionIdsSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("sessionIds", "body", m.SessionIds); err != nil {
		return err
	}

	for i := 0; i < len(m.SessionIds); i++ {

		if err := validate.MinLength("sessionIds"+"."+strconv.Itoa(i), "body", m.SessionIds[i], 1); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this session ids based on context it is used
func (m *SessionIds) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SessionIds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionIds) UnmarshalBinary(b []byte) error {
	var res SessionIds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
