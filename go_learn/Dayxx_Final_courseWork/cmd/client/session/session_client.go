// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new session API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for session API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAllTeachersByStatus(params *GetAllTeachersByStatusParams, opts ...ClientOption) (*GetAllTeachersByStatusOK, error)

	GetPlaybackInfosBySessionIds(params *GetPlaybackInfosBySessionIdsParams, opts ...ClientOption) (*GetPlaybackInfosBySessionIdsCreated, error)

	GetPlaybackStatusesBySessionIds(params *GetPlaybackStatusesBySessionIdsParams, opts ...ClientOption) (*GetPlaybackStatusesBySessionIdsCreated, error)

	GetSessionInfoBySessionIds(params *GetSessionInfoBySessionIdsParams, opts ...ClientOption) (*GetSessionInfoBySessionIdsCreated, error)

	GetSessionInfosByRange(params *GetSessionInfosByRangeParams, opts ...ClientOption) (*GetSessionInfosByRangeCreated, error)

	SetPlaybackStatusToRegeneration(params *SetPlaybackStatusToRegenerationParams, opts ...ClientOption) (*SetPlaybackStatusToRegenerationCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAllTeachersByStatus 获取不同状态下所有的老师s

  online 包含 inClass 中的老师
*/
func (a *Client) GetAllTeachersByStatus(params *GetAllTeachersByStatusParams, opts ...ClientOption) (*GetAllTeachersByStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTeachersByStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllTeachersByStatus",
		Method:             "GET",
		PathPattern:        "/teachers/{teacherStatus}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllTeachersByStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllTeachersByStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllTeachersByStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPlaybackInfosBySessionIds 批量获取回放信息s

  如果请求内容中包含不存在的连线 ID, 响应中不会包含此 ID 的任何信息
*/
func (a *Client) GetPlaybackInfosBySessionIds(params *GetPlaybackInfosBySessionIdsParams, opts ...ClientOption) (*GetPlaybackInfosBySessionIdsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlaybackInfosBySessionIdsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPlaybackInfosBySessionIds",
		Method:             "POST",
		PathPattern:        "/playbackInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPlaybackInfosBySessionIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlaybackInfosBySessionIdsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPlaybackInfosBySessionIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPlaybackStatusesBySessionIds 批量获取回放状态信息s

  如果请求内容中包含不存在的连线 ID, 响应中不会包含此 ID 的任何信息
*/
func (a *Client) GetPlaybackStatusesBySessionIds(params *GetPlaybackStatusesBySessionIdsParams, opts ...ClientOption) (*GetPlaybackStatusesBySessionIdsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlaybackStatusesBySessionIdsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPlaybackStatusesBySessionIds",
		Method:             "POST",
		PathPattern:        "/playbackStatuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPlaybackStatusesBySessionIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlaybackStatusesBySessionIdsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPlaybackStatusesBySessionIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSessionInfoBySessionIds 批量查询连线信息s

  如果请求内容中包含不存在的连线 ID, 响应中不会包含此 ID 的任何信息
*/
func (a *Client) GetSessionInfoBySessionIds(params *GetSessionInfoBySessionIdsParams, opts ...ClientOption) (*GetSessionInfoBySessionIdsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSessionInfoBySessionIdsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSessionInfoBySessionIds",
		Method:             "POST",
		PathPattern:        "/sessionInfosBySessionIds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSessionInfoBySessionIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSessionInfoBySessionIdsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSessionInfoBySessionIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSessionInfosByRange 同步课堂信息s 通过传入 连线 开始时间的时间区间
*/
func (a *Client) GetSessionInfosByRange(params *GetSessionInfosByRangeParams, opts ...ClientOption) (*GetSessionInfosByRangeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSessionInfosByRangeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSessionInfosByRange",
		Method:             "GET",
		PathPattern:        "/sessionInfosByRange",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSessionInfosByRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSessionInfosByRangeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSessionInfosByRange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetPlaybackStatusToRegeneration 重新生成回放s

  重新生成回放
*/
func (a *Client) SetPlaybackStatusToRegeneration(params *SetPlaybackStatusToRegenerationParams, opts ...ClientOption) (*SetPlaybackStatusToRegenerationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPlaybackStatusToRegenerationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setPlaybackStatusToRegeneration",
		Method:             "PUT",
		PathPattern:        "/{sessionId}/playbackStatus/regeneration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetPlaybackStatusToRegenerationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetPlaybackStatusToRegenerationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setPlaybackStatusToRegeneration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
